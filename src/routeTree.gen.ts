/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from "@tanstack/react-router"

// Import Routes

import { Route as rootRoute } from "./pages/__root"
import { Route as IndexImport } from "./pages/index"
import { Route as LoginLayoutImport } from "./pages/login/_layout"
import { Route as LoginLayoutGetTokenImport } from "./pages/login/_layout/getToken"

// Create Virtual Routes

const LoginImport = createFileRoute("/login")()
const LoginLayoutIndexLazyImport = createFileRoute("/login/_layout/")()

// Create/Update Routes

const LoginRoute = LoginImport.update({
  path: "/login",
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: "/",
  getParentRoute: () => rootRoute,
} as any).lazy(() => import("./pages/index.lazy").then((d) => d.Route))

const LoginLayoutRoute = LoginLayoutImport.update({
  id: "/_layout",
  getParentRoute: () => LoginRoute,
} as any)

const LoginLayoutIndexLazyRoute = LoginLayoutIndexLazyImport.update({
  path: "/",
  getParentRoute: () => LoginLayoutRoute,
} as any).lazy(() =>
  import("./pages/login/_layout/index.lazy").then((d) => d.Route),
)

const LoginLayoutGetTokenRoute = LoginLayoutGetTokenImport.update({
  path: "/getToken",
  getParentRoute: () => LoginLayoutRoute,
} as any).lazy(() =>
  import("./pages/login/_layout/getToken.lazy").then((d) => d.Route),
)

// Populate the FileRoutesByPath interface

declare module "@tanstack/react-router" {
  interface FileRoutesByPath {
    "/": {
      id: "/"
      path: "/"
      fullPath: "/"
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    "/login": {
      id: "/login"
      path: "/login"
      fullPath: "/login"
      preLoaderRoute: typeof LoginImport
      parentRoute: typeof rootRoute
    }
    "/login/_layout": {
      id: "/login/_layout"
      path: "/login"
      fullPath: "/login"
      preLoaderRoute: typeof LoginLayoutImport
      parentRoute: typeof LoginRoute
    }
    "/login/_layout/getToken": {
      id: "/login/_layout/getToken"
      path: "/getToken"
      fullPath: "/login/getToken"
      preLoaderRoute: typeof LoginLayoutGetTokenImport
      parentRoute: typeof LoginLayoutImport
    }
    "/login/_layout/": {
      id: "/login/_layout/"
      path: "/"
      fullPath: "/login/"
      preLoaderRoute: typeof LoginLayoutIndexLazyImport
      parentRoute: typeof LoginLayoutImport
    }
  }
}

// Create and export the route tree

interface LoginLayoutRouteChildren {
  LoginLayoutGetTokenRoute: typeof LoginLayoutGetTokenRoute
  LoginLayoutIndexLazyRoute: typeof LoginLayoutIndexLazyRoute
}

const LoginLayoutRouteChildren: LoginLayoutRouteChildren = {
  LoginLayoutGetTokenRoute: LoginLayoutGetTokenRoute,
  LoginLayoutIndexLazyRoute: LoginLayoutIndexLazyRoute,
}

const LoginLayoutRouteWithChildren = LoginLayoutRoute._addFileChildren(
  LoginLayoutRouteChildren,
)

interface LoginRouteChildren {
  LoginLayoutRoute: typeof LoginLayoutRouteWithChildren
}

const LoginRouteChildren: LoginRouteChildren = {
  LoginLayoutRoute: LoginLayoutRouteWithChildren,
}

const LoginRouteWithChildren = LoginRoute._addFileChildren(LoginRouteChildren)

export interface FileRoutesByFullPath {
  "/": typeof IndexRoute
  "/login": typeof LoginLayoutRouteWithChildren
  "/login/getToken": typeof LoginLayoutGetTokenRoute
  "/login/": typeof LoginLayoutIndexLazyRoute
}

export interface FileRoutesByTo {
  "/": typeof IndexRoute
  "/login": typeof LoginLayoutIndexLazyRoute
  "/login/getToken": typeof LoginLayoutGetTokenRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  "/": typeof IndexRoute
  "/login": typeof LoginRouteWithChildren
  "/login/_layout": typeof LoginLayoutRouteWithChildren
  "/login/_layout/getToken": typeof LoginLayoutGetTokenRoute
  "/login/_layout/": typeof LoginLayoutIndexLazyRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: "/" | "/login" | "/login/getToken" | "/login/"
  fileRoutesByTo: FileRoutesByTo
  to: "/" | "/login" | "/login/getToken"
  id:
    | "__root__"
    | "/"
    | "/login"
    | "/login/_layout"
    | "/login/_layout/getToken"
    | "/login/_layout/"
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  LoginRoute: typeof LoginRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  LoginRoute: LoginRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/login"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/login": {
      "filePath": "login",
      "children": [
        "/login/_layout"
      ]
    },
    "/login/_layout": {
      "filePath": "login/_layout.tsx",
      "parent": "/login",
      "children": [
        "/login/_layout/getToken",
        "/login/_layout/"
      ]
    },
    "/login/_layout/getToken": {
      "filePath": "login/_layout/getToken.tsx",
      "parent": "/login/_layout"
    },
    "/login/_layout/": {
      "filePath": "login/_layout/index.lazy.tsx",
      "parent": "/login/_layout"
    }
  }
}
ROUTE_MANIFEST_END */
